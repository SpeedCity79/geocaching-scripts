:- use_module(library(clpfd)).
 
sudoku(Rows) :- 
  append(Rows, Vs), Vs ins 1..9,
  maplist(all_distinct, Rows),
  transpose(Rows, Columns),     
  maplist(all_distinct, Columns), 
  Rows = [A,B,C,D,E,F,G,H,I],     
  blocks(A, B, C), 
  blocks(D, E, F), 
  blocks(G, H, I),     
[R1,R2,R3,R4,R5,R6,R7,R8,R9] = Rows,
[R1C1,R1C2,R1C3,R1C4,R1C5,R1C6,R1C7,R1C8,R1C9] = R1,
[R2C1,R2C2,R2C3,R2C4,R2C5,R2C6,R2C7,R2C8,R2C9] = R2,
[R3C1,R3C2,R3C3,R3C4,R3C5,R3C6,R3C7,R3C8,R3C9] = R3,
[R4C1,R4C2,R4C3,R4C4,R4C5,R4C6,R4C7,R4C8,R4C9] = R4,
[R5C1,R5C2,R5C3,R5C4,R5C5,R5C6,R5C7,R5C8,R5C9] = R5,
[R6C1,R6C2,R6C3,R6C4,R6C5,R6C6,R6C7,R6C8,R6C9] = R6,
[R7C1,R7C2,R7C3,R7C4,R7C5,R7C6,R7C7,R7C8,R7C9] = R7,
[R8C1,R8C2,R8C3,R8C4,R8C5,R8C6,R8C7,R8C8,R8C9] = R8,
[R9C1,R9C2,R9C3,R9C4,R9C5,R9C6,R9C7,R9C8,R9C9] = R9,
R7C1 + R7C2 #= 4,
R6C7 + R6C8 #= 5,
R4C8 + R5C8 #= 5,
R1C2 + R1C3 #= 5,
R8C4 + R8C5 #= 6,
R2C5 + R2C6 #= 6,
R7C6 + R8C6 #= 7,
R3C3 + R4C3 #= 7,
R3C1 + R3C2 #= 7,
R6C9 + R7C9 #= 8,
R4C4 + R4C5 + R4C6 #= 8,
R3C4 + R3C5 #= 8,
R2C7 + R2C8 #= 8,
R4C2 + R5C2 #= 9,
R1C7 + R1C8 #= 9,
R1C4 + R2C4 #= 9,
R8C2 + R9C2 #= 10,
R5C5 + R6C5 #= 10,
R4C1 + R5C1 #= 10,
R1C9 + R2C9 #= 10,
R9C4 + R9C5 #= 11,
R8C1 + R9C1 #= 11,
R7C7 + R8C7 #= 11,
R8C9 + R9C8 + R9C9 #= 12,
R9C6 + R9C7 #= 12,
R6C1 + R6C2 #= 12,
R4C9 + R5C9 #= 12,
R5C3 + R5C4 #= 12,
R3C8 + R3C9 #= 12,
R1C5 + R1C6 #= 13,
R7C4 + R7C5 #= 14,
R5C6 + R6C6 #= 14,
R1C1 + R2C1 #= 14,
R8C3 + R9C3 #= 15,
R7C8 + R8C8 #= 15,
R3C6 + R3C7 #= 15,
R6C3 + R6C4 + R7C3 #= 16,
R2C2 + R2C3 #= 16,
R4C7 + R5C7 #= 17,
  maplist(label, Rows).
 
blocks([], [], []).       
blocks([A,B,C|Bs1], [D,E,F|Bs2], [G,H,I|Bs3]) :-     
  all_distinct([A,B,C,D,E,F,G,H,I]),      
  blocks(Bs1, Bs2, Bs3).

problem(1,
           [[_,_,_,_,_,_,_,_,_],
            [_,_,_,_,_,_,_,_,_],
            [_,_,_,_,_,_,_,_,_],
            [_,_,_,_,_,_,_,_,_],
            [_,_,_,_,_,_,_,_,_],
            [_,_,_,_,_,_,_,_,_],
            [_,_,_,_,_,_,_,_,_],
            [_,_,_,_,_,_,_,_,_],
            [_,_,_,_,_,_,_,_,_]]).
